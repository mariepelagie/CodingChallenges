''' 
Imagine you are building a compiler. Before running any code, the compiler must check that the parentheses in the program are balanced. Every opening bracket must have a corresponding closing bracket. We can approximate this using strings.

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
- Open brackets are closed by the same type of brackets.
- Open brackets are closed in the correct order.
- Note that an empty string is also considered valid.
'''

## plan: create dictionary of open paranthesis  as keys eg '['and count store value counts. loop throu set at until first closing pranthesis.  create dictionary of open paranthesis. check if numer of open == number of close
class Solution:
  def isValid(self, s):
    # if empty string return true
    if s=="":
        return True
    open_par_list =['[','(','{']
    close_par_list =[']',')','}']
    parantheses_count = {'[':0,'(':0,'{':0 ,']':0,')':0,'}':0}
    # close_par = {}
    ## count the number of each paranthesis character and store in
    ## dictionary
    for par in s:
        parantheses_count[par]+=1
    
    ## lop through and check if each open paranthesis == close paranthesis
    for ii in range(len(open_par_list)):
        if parantheses_count[open_par_list[ii]]!= parantheses_count[close_par_list[ii]]:
            return False
    return True
        
        

# Test Program
s = "()(){(())" 
# should return False
print(Solution().isValid(s))

s = ""
# should return True
print(Solution().isValid(s))

s = "([{}])()"
# should return True
print(Solution().isValid(s))
